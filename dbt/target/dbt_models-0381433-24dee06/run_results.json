{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-05-09T00:31:51.691612Z", "invocation_id": "30251460-60f6-479b-bda1-d6614a517835", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-09T00:31:51.227418Z", "completed_at": "2025-05-09T00:31:51.259546Z"}, {"name": "execute", "started_at": "2025-05-09T00:31:51.261331Z", "completed_at": "2025-05-09T00:31:51.358371Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13451933860778809, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.football_statsbomb.int_defensive_actions", "compiled": true, "compiled_code": "\n\nwith defensive_actions as (\n    select *\n    from `football_statsbomb_staging`.`stg_events`\n    where type_name in ('Tackle', 'Interception')\n)\n\nselect\n    event_id,\n    team_id,\n    team_name,\n    type_name,\n    minute,\n    second,\n    duration\nfrom defensive_actions", "relation_name": "`football_statsbomb_intermediate`.`int_defensive_actions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-09T00:31:51.377581Z", "completed_at": "2025-05-09T00:31:51.398626Z"}, {"name": "execute", "started_at": "2025-05-09T00:31:51.400549Z", "completed_at": "2025-05-09T00:31:51.438675Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06557369232177734, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.football_statsbomb.int_passes", "compiled": true, "compiled_code": "\n\nwith passes as (\n    select *\n    from `football_statsbomb_staging`.`stg_events`\n    where type_name = 'Pass'\n),\n\nwith_pass_outcome as (\n    select\n        passes.event_id,\n        passes.team_id,\n        passes.team_name,\n        passes.possession,\n        passes.minute,\n        passes.second,\n        passes.duration,\n        -- Assume outcome_id = 1 is 'Complete'; adapt if different\n        case when passes.play_pattern_name = 'Regular Play' then 1 else 0 end as is_completed\n    from passes\n)\n\nselect * from with_pass_outcome", "relation_name": "`football_statsbomb_intermediate`.`int_passes`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-09T00:31:51.453248Z", "completed_at": "2025-05-09T00:31:51.484410Z"}, {"name": "execute", "started_at": "2025-05-09T00:31:51.489047Z", "completed_at": "2025-05-09T00:31:51.525466Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07624173164367676, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.football_statsbomb.int_player_events", "compiled": true, "compiled_code": "\n\nwith events as (\n    select *\n    from `football_statsbomb_staging`.`stg_events`\n),\n\nplayer_touches as (\n    select\n        team_id,\n        team_name,\n        possession,\n        type_name,\n        count(*) as event_count\n    from events\n    group by team_id, team_name, possession, type_name\n)\n\nselect * from player_touches", "relation_name": "`football_statsbomb_intermediate`.`int_player_events`", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-05-09T00:31:51.537859Z", "completed_at": "2025-05-09T00:31:51.554728Z"}, {"name": "execute", "started_at": "2025-05-09T00:31:51.557526Z", "completed_at": "2025-05-09T00:31:51.599839Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07044076919555664, "adapter_response": {}, "message": "Database Error in model int_possessions (models/intermediate/int_possessions.sql)\n  Code: 47.\n  DB::Exception: Unknown expression identifier `match_id` in scope SELECT match_id, possession, possession_team_id AS team_id, possession_team_name AS team_name, sum(duration) AS possession_duration_seconds, count(*) AS number_of_events FROM football_statsbomb_staging.stg_events GROUP BY match_id, possession, possession_team_id, possession_team_name. Stack trace:\n  \n  0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000f2bff3b\n  1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009c74bec\n  2. DB::Exception::Exception<char const*, String&, String, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String&&, String&&, String&&) @ 0x000000001290d701\n  3. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000128e054a\n  4. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x00000000128dd834\n  5. DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000001290e287\n  6. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x00000000128d3f9a\n  7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x00000000128de33c\n  8. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001290ec03\n  9. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x00000000128d3f4f\n  10. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x00000000128d226c\n  11. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x00000000128d1ad3\n  12. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000012927496\n  13. DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.12278396184456015564) @ 0x000000001323bd25\n  14. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013239cbc\n  15. DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x000000001323c159\n  16. DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001319f55e\n  17. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000131a7faa\n  18. DB::InterpreterCreateQuery::execute() @ 0x00000000131bd9f8\n  19. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000013597288\n  20. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000013590986\n  21. DB::TCPHandler::runImpl() @ 0x00000000148f0a7e\n  22. DB::TCPHandler::run() @ 0x000000001490f779\n  23. Poco::Net::TCPServerConnection::start() @ 0x00000000180162e7\n  24. Poco::Net::TCPServerDispatcher::run() @ 0x0000000018016739\n  25. Poco::PooledThread::run() @ 0x0000000017fe1a5b\n  26. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017fdff3d\n  27. ? @ 0x00007f6d0cfb0ac3\n  28. ? @ 0x00007f6d0d042850\n  compiled code at target/dbt_models-0381433-24dee06/run/football_statsbomb/models/intermediate/int_possessions.sql", "failures": null, "unique_id": "model.football_statsbomb.int_possessions", "compiled": true, "compiled_code": "\n\nwith possessions as (\n    select\n        match_id,\n        possession,\n        possession_team_id as team_id,\n        possession_team_name as team_name,\n        sum(duration) as possession_duration_seconds,\n        count(*) as number_of_events\n    from `football_statsbomb_staging`.`stg_events`\n    group by match_id, possession, possession_team_id, possession_team_name\n)\n\nselect * from possessions", "relation_name": "`football_statsbomb_intermediate`.`int_possessions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-09T00:31:51.617803Z", "completed_at": "2025-05-09T00:31:51.637057Z"}, {"name": "execute", "started_at": "2025-05-09T00:31:51.639155Z", "completed_at": "2025-05-09T00:31:51.671255Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0571897029876709, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.football_statsbomb.int_shots", "compiled": true, "compiled_code": "\n\nwith shots as (\n    select *\n    from `football_statsbomb_staging`.`stg_events`\n    where type_name = 'Shot'\n),\n\ngoals_and_shots as (\n    select\n        event_id,\n        team_id,\n        team_name,\n        minute,\n        second,\n        duration,\n        -- Assuming goal detection is based on a specific flag (placeholder below)\n        case when play_pattern_name = 'From Turnover' then 1 else 0 end as is_goal\n    from shots\n)\n\nselect * from goals_and_shots", "relation_name": "`football_statsbomb_intermediate`.`int_shots`", "batch_results": null}], "elapsed_time": 0.9644317626953125, "args": {"log_format_file": "json", "state_modified_compare_vars": false, "include_saved_query": false, "send_anonymous_usage_stats": false, "require_nested_cumulative_type_params": false, "cache_selected_only": false, "log_level": "info", "profiles_dir": "/app/dbt/profiles", "defer": false, "require_resource_names_without_spaces": false, "invocation_command": "dbt build --select football_statsbomb.intermediate.int_shots football_statsbomb.intermediate.int_possessions football_statsbomb.intermediate.int_passes football_statsbomb.intermediate.int_player_events football_statsbomb.intermediate.int_defensive_actions", "log_format": "json", "select": ["football_statsbomb.intermediate.int_shots", "football_statsbomb.intermediate.int_possessions", "football_statsbomb.intermediate.int_passes", "football_statsbomb.intermediate.int_player_events", "football_statsbomb.intermediate.int_defensive_actions"], "target_path": "target/dbt_models-0381433-24dee06", "log_path": "/app/dbt/target/dbt_models-0381433-24dee06", "show_resource_report": false, "which": "build", "strict_mode": false, "log_file_max_bytes": 10485760, "exclude_resource_types": [], "require_batched_execution_for_custom_microbatch_strategy": false, "show": false, "skip_nodes_if_on_run_start_fails": false, "indirect_selection": "eager", "static_parser": true, "use_colors_file": true, "favor_state": false, "exclude": [], "state_modified_compare_more_unrendered_values": false, "export_saved_queries": false, "resource_types": [], "quiet": false, "version_check": true, "write_json": true, "partial_parse_file_diff": true, "printer_width": 80, "require_yaml_configuration_for_mf_time_spines": false, "project_dir": "/app/dbt", "warn_error_options": {"include": [], "exclude": []}, "introspect": true, "require_explicit_package_overrides_for_builtin_materializations": true, "source_freshness_run_project_hooks": false, "macro_debugging": false, "partial_parse": true, "populate_cache": true, "use_colors": true, "vars": {}, "print": true, "empty": false, "log_level_file": "debug"}}